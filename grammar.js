// Generated automatically by nearley, version 2.19.0
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "main", "symbols": ["_", "p"], "postprocess": a => a[1]},
    {"name": "main$string$1", "symbols": [{"literal":"/"}, {"literal":"/"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "main$ebnf$1", "symbols": []},
    {"name": "main$ebnf$1", "symbols": ["main$ebnf$1", /[^\n]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "main", "symbols": ["_", "p", "main$string$1", "main$ebnf$1"], "postprocess": a => a[1]},
    {"name": "p$ebnf$1", "symbols": []},
    {"name": "p$ebnf$1", "symbols": ["p$ebnf$1", "i"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "p", "symbols": ["p$ebnf$1"], "postprocess": id},
    {"name": "i", "symbols": [{"literal":"+"}, "_", "n", "cc"], "postprocess": a => [a[0],a[2],a[3]]},
    {"name": "i", "symbols": [{"literal":"!"}, "_", "n", "cc"], "postprocess": a => [a[0],a[2],a[3]]},
    {"name": "i", "symbols": [{"literal":"-"}, "_", "c", "cc"], "postprocess": a => [a[0],a[2],a[3]]},
    {"name": "i", "symbols": [{"literal":"*"}, "_", "n", "cc"], "postprocess": a => [a[0],a[2],a[3]]},
    {"name": "i", "symbols": [{"literal":"("}, "_", "p", {"literal":")"}, "_"], "postprocess": a => [a[0],a[2]]},
    {"name": "i$ebnf$1", "symbols": []},
    {"name": "i$ebnf$1", "symbols": ["i$ebnf$1", "fargs"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "i", "symbols": [{"literal":"{"}, "_", "fprefix", "i$ebnf$1", {"literal":"}"}, "_"], "postprocess": a => [a[0],a[2],a[3]]},
    {"name": "i", "symbols": [{"literal":"<"}, "sysname", {"literal":">"}, "_"], "postprocess": a => [a[0],a[1]]},
    {"name": "fprefix", "symbols": ["c"], "postprocess": a => [true, null,a[0]]},
    {"name": "fprefix", "symbols": ["c", {"literal":"|"}, "_", "c"], "postprocess": a => [false,a[0],a[3]]},
    {"name": "fprefix", "symbols": [{"literal":"*"}, "_", "n", {"literal":"|"}, "_", "c"], "postprocess": a => [true, a[2],a[5]]},
    {"name": "fargs", "symbols": [{"literal":"+"}, "_", "n"], "postprocess": a => [a[0],a[2]]},
    {"name": "fargs", "symbols": [{"literal":"-"}, "_", "c"], "postprocess": a => [a[0],a[2]]},
    {"name": "eprefix", "symbols": [], "postprocess": a => null},
    {"name": "eprefix", "symbols": ["n", {"literal":"|"}, "_"], "postprocess": a => a[0]},
    {"name": "uprefix", "symbols": [], "postprocess": a => [null,null,[]  ]},
    {"name": "uprefix$ebnf$1$subexpression$1", "symbols": [{"literal":"*"}, "_", "n"]},
    {"name": "uprefix$ebnf$1", "symbols": ["uprefix$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "uprefix$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "uprefix$ebnf$2$subexpression$1", "symbols": [{"literal":"!"}, "_", "n"]},
    {"name": "uprefix$ebnf$2", "symbols": ["uprefix$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "uprefix$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "uprefix$ebnf$3", "symbols": []},
    {"name": "uprefix$ebnf$3", "symbols": ["uprefix$ebnf$3", "fargs"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "uprefix", "symbols": ["uprefix$ebnf$1", "uprefix$ebnf$2", "uprefix$ebnf$3", {"literal":"|"}, "_"], "postprocess": a => [a[0],a[1],a[2]]},
    {"name": "cc", "symbols": [], "postprocess": a => null},
    {"name": "cc", "symbols": [{"literal":":"}, "_", "c1"], "postprocess": a => a[2]},
    {"name": "c", "symbols": [], "postprocess": a => null},
    {"name": "c", "symbols": ["c1"], "postprocess": id},
    {"name": "c1", "symbols": ["number", "_"], "postprocess": id},
    {"name": "c1", "symbols": ["name", "_"], "postprocess": id},
    {"name": "c1", "symbols": [{"literal":"["}, "_", "eprefix", "p", {"literal":"]"}, "_"], "postprocess": a => [a[0],a[2],a[3]]},
    {"name": "c1$string$1", "symbols": [{"literal":"["}, {"literal":"["}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "c1$string$2", "symbols": [{"literal":"]"}, {"literal":"]"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "c1", "symbols": ["c1$string$1", "_", "uprefix", "p", "c1$string$2", "_"], "postprocess": a => [a[0],a[2],a[3]]},
    {"name": "n", "symbols": [], "postprocess": a => null},
    {"name": "n", "symbols": ["n1"], "postprocess": id},
    {"name": "n1", "symbols": ["name", "_"], "postprocess": id},
    {"name": "number$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$1", "symbols": ["number$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$1"], "postprocess": a => +a[0]},
    {"name": "name$ebnf$1", "symbols": []},
    {"name": "name$ebnf$1", "symbols": ["name$ebnf$1", "namepart"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "name", "symbols": ["namepart1", "name$ebnf$1"], "postprocess": a => a[0]+a[1].join("")},
    {"name": "namepart", "symbols": [/[0-9]/], "postprocess": id},
    {"name": "namepart", "symbols": ["namepart1"], "postprocess": id},
    {"name": "namepart1", "symbols": [/[A-Za-z_#$.]/], "postprocess": id},
    {"name": "namepart1$ebnf$1", "symbols": []},
    {"name": "namepart1$ebnf$1", "symbols": ["namepart1$ebnf$1", /[^"]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "namepart1", "symbols": [{"literal":"\""}, "namepart1$ebnf$1", {"literal":"\""}], "postprocess": a => a[0]+a[1].join("")+a[2]},
    {"name": "namepart1$ebnf$2", "symbols": []},
    {"name": "namepart1$ebnf$2", "symbols": ["namepart1$ebnf$2", /[^']/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "namepart1", "symbols": [{"literal":"'"}, "namepart1$ebnf$2", {"literal":"'"}], "postprocess": a => a[0]+a[1].join("")+a[2]},
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": a => null},
    {"name": "_$ebnf$2", "symbols": []},
    {"name": "_$ebnf$2", "symbols": ["_$ebnf$2", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$2", "comment", "_"], "postprocess": a => null},
    {"name": "sysname$ebnf$1", "symbols": []},
    {"name": "sysname$ebnf$1", "symbols": ["sysname$ebnf$1", /[^>]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "sysname", "symbols": ["sysname$ebnf$1"], "postprocess": a => a[0].join("")},
    {"name": "comment$string$1", "symbols": [{"literal":"/"}, {"literal":"/"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comment$ebnf$1", "symbols": []},
    {"name": "comment$ebnf$1", "symbols": ["comment$ebnf$1", /[^\n]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "comment", "symbols": ["comment$string$1", "comment$ebnf$1", {"literal":"\n"}]},
    {"name": "comment$string$2", "symbols": [{"literal":"/"}, {"literal":"*"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comment$ebnf$2", "symbols": []},
    {"name": "comment$ebnf$2$subexpression$1$ebnf$1", "symbols": []},
    {"name": "comment$ebnf$2$subexpression$1$ebnf$1", "symbols": ["comment$ebnf$2$subexpression$1$ebnf$1", {"literal":"/"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "comment$ebnf$2$subexpression$1$ebnf$2", "symbols": []},
    {"name": "comment$ebnf$2$subexpression$1$ebnf$2", "symbols": ["comment$ebnf$2$subexpression$1$ebnf$2", {"literal":"*"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "comment$ebnf$2$subexpression$1", "symbols": ["comment$ebnf$2$subexpression$1$ebnf$1", "comment$ebnf$2$subexpression$1$ebnf$2", /[^*\/]/]},
    {"name": "comment$ebnf$2", "symbols": ["comment$ebnf$2", "comment$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "comment$ebnf$3", "symbols": []},
    {"name": "comment$ebnf$3", "symbols": ["comment$ebnf$3", {"literal":"/"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "comment$ebnf$4", "symbols": []},
    {"name": "comment$ebnf$4", "symbols": ["comment$ebnf$4", {"literal":"*"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "comment$string$3", "symbols": [{"literal":"*"}, {"literal":"/"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "comment", "symbols": ["comment$string$2", "comment$ebnf$2", "comment$ebnf$3", "comment$ebnf$4", "comment$string$3"]}
]
  , ParserStart: "main"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
