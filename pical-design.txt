Commands:
+x:c                  Read x from c
!x:c                  Replicated read x from c
*x                    Create a new channel x
-x:c                  Write x to c
(P)                   Fork P
*x:y                  Alias y as x
{f -i +o}             Function call shorthand: *io -:f -i:io +o:io

Expressions:
name                  Channel name (can't start with a number, must match ([\w#$]|"[^"]"|'[^']')*
number                0 is most recently created channel
[P]                   Expression shorthand: Evaluates process and returns last created channel
[x|P]                 Expression shorthand: Evaluates process and returns channel named x
[[P]]                 Unevaluated shorthand: [*(!r P -:r)]
[[*self !io +i -o|P]] Unevaluated w/ signature: [*self(!io +i:r P -o:r)]


Possible extensions:

<cmd>                 Preprocessor command (such as require or import)
{io|f -i +o}          Function w/ existing IO channel: -io:f -i:io +o:io
{*io|f -i +o}         Function w/ exposed IO channel: *io -io:f -i:io +o:io
+[P]:c                LValue expression: +$:c P (compared to RValue expression: +c:<P> ==> P +c:$)

Details of function/expression shorthand

If a command uses expression shorthand, the expressions are evaluated in the order they appear in the program, then the command is evaluated.
If a function shorthand command uses expression shorthand, each individual command is evaluated as its expression completes.
Channels defined in an expression block are accessible outside them, but not an uneval block (due to the implicit fork).
Channels implicitly defined by shorthand notation are still accesible as the default channel or by index notation.
Expressions can't use recursive calls like *recursive:[[{recursive}]] since the alias happens after the function is defined. Use *recursive:[[*self|{self}]] instead.
Channels output by expression shorthand and uneval shorthand can themselves be expression shorthand. These are evaluated after the expression body is.


RPN representation:

+x:c                  -> & x = c +
!x:c                  -> & x = c !
*x:y                  -> & x = y *
-x:c                  -> = x = c -
(P)                   -> ( <P>
{*io|f -i +o}         -> & io = f { true  = i {- & o {+ }
{io|f -i +o}          -> = io = f { false = i {- & o {+ }
[x|P]                 -> P = x
[[P]]                 -> [[ < & null & null [[* false false & i {+ P = o {- >
[[*self !io +i -o|P]] -> [[ < & self & io   [[* true  true  & i {+ P = o {- >

Opcode Length Push Pop 
=      2      1        Consume name, push named var
&      2      1        Consume name, push name
+      1           2   Pop c, pop x, read x from c
!      1           2   Pop c, pop x, replicated read x from c
-      1           2   Pop c, pop x, write x to c
*      1           2   Pop x, assign new channel to x
*:     1           2   Pop c, pop x, alias x as c
(      2               Consume program, fork
<      2      ?    ?   Consume, system call
{      2      1    2   Consume function setup, pop f, pop io, write io to f, push io
{+     1           1   Pop x, peek c, read x from c
{-     1           1   Pop x, peek c, write x to c
}      1           1   Pop
[[     2      1        Consume program, push new channel, fork with new channel on stack 
[[*    3      1    3   pop io name, pop self name, pop self channel, consume block setup, push IO channel